apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    //添加签名文件
    signingConfigs {
        sample {
            storeFile file('../sample.jks')
            storePassword "samp1e"
            keyAlias "sample"
            keyPassword "samp1e"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.sample
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            minifyEnabled false
            signingConfig signingConfigs.sample
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {


        File f;
        Set<String> javaDirs = sourceSets.main.java.srcDirs
        //创建源文件文件夹
        for (int i = 0; i < javaDirs.size(); i++) {
            f = file("${javaDirs.getAt(i)}")
            f.mkdirs()
        }
    }
}
dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile rootProject.ext.dependencies['appcompat-v7']
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    testCompile 'junit:junit:4.12'
}

////////////// maven仓库推送 //////////////

apply plugin: 'maven'

//https://github.com/wittyneko/libs-android
def siteUrl = 'https://github.com/wittyneko/libs-android'
//https://github.com/wittyneko/libs-android.git
def gitUrl = 'https://github.com/wittyneko/libs-android.git'
group = "cn.wittyneko"
archivesBaseName = 'base'
version = '1.0.0-SNAPSHOT'

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    //title = ''
    //description = ''
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(configurations.provided.files,configurations.compile.files,android.getBootClasspath().join(File.pathSeparator))
    options {
        encoding 'utf-8'
        charSet 'utf-8'
        links 'http://docs.oracle.com/javase/7/docs/api/'
        linksOffline "https://developer.android.com/reference", "${android.sdkDirectory}/docs/reference"
    }
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    options.encoding = 'utf-8'
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            String user = 'admin'
            String password = 'admin123'
            //先读取gradle.properties，不存在则读取local.properties
            Properties properties = rootProject.ext.android.properties
            user = rootProject.hasProperty('localUserName') ? rootProject.localUserName
                    : (properties != null ? properties.getProperty('localUserName', user) : user)
            password = rootProject.hasProperty('localPassword') ? rootProject.localPassword
                    : (properties != null ? properties.getProperty('localPassword', password) : password)
            println "user: $user, passowrd: $password"
            repository(url: rootProject.ext.maven.localMaven){
                println "uploadArchives $url"
                authentication(userName: user, password: password)
            }
            snapshotRepository(url: rootProject.ext.maven.localMavenSnapshots){
                println "uploadArchives $url"
                authentication(userName: user, password: password)
            }
        }
    }
}
